package controller;


import command.ShapeCommandFactory;
import model.interfaces.IApplicationState;
import view.EventName;
import view.interfaces.IUiModule;

public class JPaintController implements IJPaintController {
	
    private final IUiModule uiModule;
    private final IApplicationState applicationState;
    private final ShapeCommandFactory shapeCommandFactory;


    public JPaintController(IUiModule uiModule, IApplicationState applicationState, ShapeCommandFactory shapeCommandFactory) {
        this.uiModule = uiModule;
        this.applicationState = applicationState;
        this.shapeCommandFactory = shapeCommandFactory;
   
    }

    @Override
    public void setup() {
        setupEvents();
    }

    private void setupEvents() {
    	
        uiModule.addEvent(EventName.CHOOSE_SHAPE, () -> applicationState.setActiveShape());
        uiModule.addEvent(EventName.CHOOSE_PRIMARY_COLOR, () -> applicationState.setActivePrimaryColor());
        uiModule.addEvent(EventName.CHOOSE_SECONDARY_COLOR, () -> applicationState.setActiveSecondaryColor());
        uiModule.addEvent(EventName.CHOOSE_SHADING_TYPE, () -> applicationState.setActiveShadingType());
        uiModule.addEvent(EventName.CHOOSE_START_POINT_ENDPOINT_MODE, () -> applicationState.setActiveStartAndEndPointMode());

        uiModule.addEvent(EventName.UNDO, () -> shapeCommandFactory.createUndoCommand().execute());
        uiModule.addEvent(EventName.REDO, () -> shapeCommandFactory.createRedoCommand().execute());
        uiModule.addEvent(EventName.COPY, () -> shapeCommandFactory.createCopyCommand().execute());        
        uiModule.addEvent(EventName.PASTE, () -> shapeCommandFactory.createPasteCommand().execute());
        uiModule.addEvent(EventName.DELETE, () -> shapeCommandFactory.createDeleteShapeCommand().execute());
   
    }
}
